<?php

namespace SurveyBundle\Repository;
use Doctrine\Common\Collections\Criteria;
use Doctrine\ORM\Mapping\OrderBy;
use SurveyBundle\Entity\SurveyType;
use SurveyBundle\Entity\User;

/**
 * SurveyRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SurveyRepository extends \Doctrine\ORM\EntityRepository
{
    public function findAllCurrentUserSurvey(\DateTime $start,\DateTime $end,$user,SurveyType $type)
    {
        $expr = Criteria::expr();
        $criteria = Criteria::create();
        $criteria->where(
            $expr->andX(
                $expr->gt('send_date',$start),
                $expr->lt('send_date',$end),
                $expr->eq('user_id',$user),
                $expr->eq('survey_type',$type)
            )
        );
        $criteria->orderBy(['send_date' => Criteria::ASC]);
        $query = $this->createQueryBuilder('s')->addCriteria($criteria);

        return $query->getQuery();
    }

    public function findAllCurrentTeamSurvey(\DateTime $start,\DateTime $end,$users,SurveyType $type)
    {
        $expr = Criteria::expr();
        $criteria = Criteria::create();
        $criteria->where(
            $expr->andX(
                $expr->gt('send_date',$start),
                $expr->lt('send_date',$end),
                $expr->in('user_id',$users),
                $expr->eq('survey_type',$type)
            )
        );
        $criteria->orderBy(['send_date' => Criteria::ASC]);
        $query = $this->createQueryBuilder('s')->addCriteria($criteria);

        return $query->getQuery();
    }

    public function findAllCurrentUserSurveySpecial(\DateTime $start,\DateTime $end,$user,$type)
    {
        $expr = Criteria::expr();
        $criteria = Criteria::create();
        switch ($type){
            case 'cancel_request':
                $criteria->where(
                    $expr->andX(
                        $expr->gt('send_date',$start),
                        $expr->lt('send_date',$end),
                        $expr->eq('user_id',$user),
                        $expr->neq('user_comment',null)
                    )
                );
                break;
            case 'resend_ready':
                $criteria->where(
                    $expr->andX(
                        $expr->neq('rate',null),
                        $expr->gt('vote_date',new \DateTime('now -3 days')),
                        $expr->eq('user_id',$user),
                        $expr->eq('user_comment',null)
                    )
                );
                break;
        }

        $criteria->orderBy(['send_date' => Criteria::ASC]);
        $query = $this->createQueryBuilder('s')->addCriteria($criteria);
        return $query->getQuery();
    }

    public function findAllForUserSurvey(User $user,\DateTime $start,\DateTime $end)
    {
        $expr = Criteria::expr();
        $criteria = Criteria::create();
        $criteria->where(
            $expr->andX(
                $expr->gt('send_date',$start),
                $expr->lt('send_date',$end),
                $expr->eq('user_id',$user)
            )
        );

        $criteria->orderBy(['send_date' => Criteria::ASC]);
        return $this->matching($criteria);
    }

    public function findAllForUserSurveyFilter(User $user = null,$filter,SurveyType $type = null,\DateTime $start,\DateTime $end)
    {
        $query = $this->getEntityManager()->createQueryBuilder();
        switch ($filter){
            case 'all':
                $query
                    ->select('s')
                        ->from('SurveyBundle:Survey','s')
                        ->innerJoin('SurveyBundle:SurveyType','s2','WITH','s2.id = s.survey_type')
                        ->innerJoin('SurveyBundle:User','u','WITH','u.id = s.user_id')
                        ->leftJoin('SurveyBundle:Rate','r','WITH','r.id = s.rate')
                        ->leftJoin('SurveyBundle:Rate','rr','WITH','rr.id = s.resend_rate')
                        ->leftJoin('SurveyBundle:SurveyStaffRate','sr','WITH','sr.id = s.staff_rate')
                        ->leftJoin('SurveyBundle:SurveyStaffRate','rsr','WITH','rsr.id = s.resend_staff_rate')
                        ->where('s.send_date >= :start')
                            ->andWhere('s.send_date <= :end')
                        ->addOrderBy('s.send_date','ASC')
                    ->setParameters([
                        "start" => $start,
                        "end" => $end,
                    ]);

                if ($user){
                    $query
                        ->andWhere($query->expr()->eq("s.user_id",$user->getId()))
                        ;
                }
                if ($type){
                    $query
                        ->andWhere($query->expr()->eq("s.survey_type",$type->getId()))
                    ;
                }
                break;
            case 'user_comment':
                if (!is_null($user) && !is_null($type)) {
                    $query
                        ->select('s')
                        ->from('SurveyBundle:Survey', 's')
                        ->innerJoin('SurveyBundle:SurveyType', 's2', 'WITH', 's2.id = s.survey_type')
                        ->innerJoin('SurveyBundle:User', 'u', 'WITH', 'u.id = s.user_id')
                        ->leftJoin('SurveyBundle:Rate', 'r', 'WITH', 'r.id = s.rate')
                        ->leftJoin('SurveyBundle:Rate', 'rr', 'WITH', 'rr.id = s.resend_rate')
                        ->leftJoin('SurveyBundle:SurveyStaffRate', 'sr', 'WITH', 'sr.id = s.staff_rate')
                        ->leftJoin('SurveyBundle:SurveyStaffRate', 'rsr', 'WITH', 'rsr.id = s.resend_staff_rate')
                        ->where('s.send_date >= :start')
                            ->andWhere('s.send_date <= :end')
                            ->andWhere('s.user_id = :user')
                            ->andWhere('s.survey_type = :type')
                            ->andWhere('s.user_comment is not null')
                        ->addOrderBy('s.send_date', 'ASC')
                        ->setParameters([
                            "start" => $start,
                            "end" => $end,
                            "user" => $user,
                            "type" => $type,
                        ]);
                }else if (!is_null($user) && is_null($type)){
                    $query
                        ->select('s')
                        ->from('SurveyBundle:Survey', 's')
                        ->innerJoin('SurveyBundle:SurveyType', 's2', 'WITH', 's2.id = s.survey_type')
                        ->innerJoin('SurveyBundle:User', 'u', 'WITH', 'u.id = s.user_id')
                        ->leftJoin('SurveyBundle:Rate', 'r', 'WITH', 'r.id = s.rate')
                        ->leftJoin('SurveyBundle:Rate', 'rr', 'WITH', 'rr.id = s.resend_rate')
                        ->leftJoin('SurveyBundle:SurveyStaffRate', 'sr', 'WITH', 'sr.id = s.staff_rate')
                        ->leftJoin('SurveyBundle:SurveyStaffRate', 'rsr', 'WITH', 'rsr.id = s.resend_staff_rate')
                        ->where('s.send_date >= :start')
                        ->andWhere('s.send_date <= :end')
                        ->andWhere('s.user_id = :user')
                        ->andWhere('s.user_comment is not null')
                        ->addOrderBy('s.send_date', 'ASC')
                        ->setParameters([
                            "start" => $start,
                            "end" => $end,
                            "user" => $user,
                        ]);
                }else if (is_null($user) && !is_null($type)){
                    $query
                        ->select('s')
                        ->from('SurveyBundle:Survey', 's')
                        ->innerJoin('SurveyBundle:SurveyType', 's2', 'WITH', 's2.id = s.survey_type')
                        ->innerJoin('SurveyBundle:User', 'u', 'WITH', 'u.id = s.user_id')
                        ->leftJoin('SurveyBundle:Rate', 'r', 'WITH', 'r.id = s.rate')
                        ->leftJoin('SurveyBundle:Rate', 'rr', 'WITH', 'rr.id = s.resend_rate')
                        ->leftJoin('SurveyBundle:SurveyStaffRate', 'sr', 'WITH', 'sr.id = s.staff_rate')
                        ->leftJoin('SurveyBundle:SurveyStaffRate', 'rsr', 'WITH', 'rsr.id = s.resend_staff_rate')
                        ->where('s.send_date >= :start')
                        ->andWhere('s.send_date <= :end')
                        ->andWhere('s.survey_type = :type')
                        ->andWhere('s.user_comment is not null')
                        ->addOrderBy('s.send_date', 'ASC')
                        ->setParameters([
                            "start" => $start,
                            "end" => $end,
                            "type" => $type,
                        ]);
                }else if (is_null($user) && is_null($type)){
                    $query
                        ->select('s')
                        ->from('SurveyBundle:Survey', 's')
                        ->innerJoin('SurveyBundle:SurveyType', 's2', 'WITH', 's2.id = s.survey_type')
                        ->innerJoin('SurveyBundle:User', 'u', 'WITH', 'u.id = s.user_id')
                        ->leftJoin('SurveyBundle:Rate', 'r', 'WITH', 'r.id = s.rate')
                        ->leftJoin('SurveyBundle:Rate', 'rr', 'WITH', 'rr.id = s.resend_rate')
                        ->leftJoin('SurveyBundle:SurveyStaffRate', 'sr', 'WITH', 'sr.id = s.staff_rate')
                        ->leftJoin('SurveyBundle:SurveyStaffRate', 'rsr', 'WITH', 'rsr.id = s.resend_staff_rate')
                        ->where('s.send_date >= :start')
                        ->andWhere('s.send_date <= :end')
                        ->andWhere('s.user_comment is not null')
                        ->addOrderBy('s.send_date', 'ASC')
                        ->setParameters([
                            "start" => $start,
                            "end" => $end,
                        ]);
                }
                break;
            case 'admin_comment':
                if (!is_null($user) && !is_null($type)) {
                    $query
                        ->select('s')
                        ->from('SurveyBundle:Survey', 's')
                        ->innerJoin('SurveyBundle:SurveyType', 's2', 'WITH', 's2.id = s.survey_type')
                        ->innerJoin('SurveyBundle:User', 'u', 'WITH', 'u.id = s.user_id')
                        ->leftJoin('SurveyBundle:Rate', 'r', 'WITH', 'r.id = s.rate')
                        ->leftJoin('SurveyBundle:Rate', 'rr', 'WITH', 'rr.id = s.resend_rate')
                        ->leftJoin('SurveyBundle:SurveyStaffRate', 'sr', 'WITH', 'sr.id = s.staff_rate')
                        ->leftJoin('SurveyBundle:SurveyStaffRate', 'rsr', 'WITH', 'rsr.id = s.resend_staff_rate')
                        ->where('s.send_date >= :start')
                            ->andWhere('s.send_date <= :end')
                            ->andWhere('s.user_id = :user')
                            ->andWhere('s.survey_type = :type')
                            ->andWhere('s.user_comment is not null')
                            ->andWhere('s.admin_comment is null')
                            ->andWhere('s.cancel is null')
                        ->addOrderBy('s.send_date', 'ASC')
                        ->setParameters([
                            "start" => $start,
                            "end" => $end,
                            "user" => $user,
                            "type" => $type,
                        ]);
                }else if (!is_null($user) && is_null($type)){
                    $query
                        ->select('s')
                        ->from('SurveyBundle:Survey', 's')
                        ->innerJoin('SurveyBundle:SurveyType', 's2', 'WITH', 's2.id = s.survey_type')
                        ->innerJoin('SurveyBundle:User', 'u', 'WITH', 'u.id = s.user_id')
                        ->leftJoin('SurveyBundle:Rate', 'r', 'WITH', 'r.id = s.rate')
                        ->leftJoin('SurveyBundle:Rate', 'rr', 'WITH', 'rr.id = s.resend_rate')
                        ->leftJoin('SurveyBundle:SurveyStaffRate', 'sr', 'WITH', 'sr.id = s.staff_rate')
                        ->leftJoin('SurveyBundle:SurveyStaffRate', 'rsr', 'WITH', 'rsr.id = s.resend_staff_rate')
                        ->where('s.send_date >= :start')
                            ->andWhere('s.send_date <= :end')
                            ->andWhere('s.user_id = :user')
                            ->andWhere('s.user_comment is not null')
                            ->andWhere('s.admin_comment is null')
                            ->andWhere('s.cancel is null')
                        ->addOrderBy('s.send_date', 'ASC')
                        ->setParameters([
                            "start" => $start,
                            "end" => $end,
                            "user" => $user,
                        ]);
                }else if (is_null($user) && !is_null($type)){
                    $query
                        ->select('s')
                        ->from('SurveyBundle:Survey', 's')
                        ->innerJoin('SurveyBundle:SurveyType', 's2', 'WITH', 's2.id = s.survey_type')
                        ->innerJoin('SurveyBundle:User', 'u', 'WITH', 'u.id = s.user_id')
                        ->leftJoin('SurveyBundle:Rate', 'r', 'WITH', 'r.id = s.rate')
                        ->leftJoin('SurveyBundle:Rate', 'rr', 'WITH', 'rr.id = s.resend_rate')
                        ->leftJoin('SurveyBundle:SurveyStaffRate', 'sr', 'WITH', 'sr.id = s.staff_rate')
                        ->leftJoin('SurveyBundle:SurveyStaffRate', 'rsr', 'WITH', 'rsr.id = s.resend_staff_rate')
                        ->where('s.send_date >= :start')
                            ->andWhere('s.send_date <= :end')
                            ->andWhere('s.survey_type = :type')
                            ->andWhere('s.user_comment is not null')
                            ->andWhere('s.admin_comment is null')
                            ->andWhere('s.cancel is null')
                        ->addOrderBy('s.send_date', 'ASC')
                        ->setParameters([
                            "start" => $start,
                            "end" => $end,
                            "type" => $type,
                        ]);
                }else if (is_null($user) && is_null($type)){
                    $query
                        ->select('s')
                        ->from('SurveyBundle:Survey', 's')
                        ->innerJoin('SurveyBundle:SurveyType', 's2', 'WITH', 's2.id = s.survey_type')
                        ->innerJoin('SurveyBundle:User', 'u', 'WITH', 'u.id = s.user_id')
                        ->leftJoin('SurveyBundle:Rate', 'r', 'WITH', 'r.id = s.rate')
                        ->leftJoin('SurveyBundle:Rate', 'rr', 'WITH', 'rr.id = s.resend_rate')
                        ->leftJoin('SurveyBundle:SurveyStaffRate', 'sr', 'WITH', 'sr.id = s.staff_rate')
                        ->leftJoin('SurveyBundle:SurveyStaffRate', 'rsr', 'WITH', 'rsr.id = s.resend_staff_rate')
                        ->where('s.send_date >= :start')
                            ->andWhere('s.send_date <= :end')
                            ->andWhere('s.user_comment is not null')
                            ->andWhere('s.admin_comment is null')
                            ->andWhere('s.cancel is null')
                        ->addOrderBy('s.send_date', 'ASC')
                        ->setParameters([
                            "start" => $start,
                            "end" => $end,
                        ]);
                }
                break;
            default:
                if (!is_null($user) && !is_null($type)) {
                    $query
                        ->select('s')
                            ->from('SurveyBundle:Survey','s')
                            ->innerJoin('SurveyBundle:SurveyType','s2','WITH','s2.id = s.survey_type')
                            ->innerJoin('SurveyBundle:User','u','WITH','u.id = s.user_id')
                            ->leftJoin('SurveyBundle:Rate','r','WITH','r.id = s.rate')
                            ->leftJoin('SurveyBundle:Rate','rr','WITH','rr.id = s.resend_rate')
                            ->leftJoin('SurveyBundle:SurveyStaffRate','sr','WITH','sr.id = s.staff_rate')
                            ->leftJoin('SurveyBundle:SurveyStaffRate','rsr','WITH','rsr.id = s.resend_staff_rate')
                            ->where('s.send_date >= :start')
                                ->andWhere('s.send_date <= :end')
                                ->andWhere('s.user_id = :user')
                                ->andWhere('s.survey_type = :type')
                                ->andWhere('s.'.$filter.' is not null')
                            ->addOrderBy('s.send_date','ASC')
                        ->setParameters([
                            "start" => $start,
                            "end" => $end,
                            "user" => $user,
                            "type" => $type,
                        ]);
                }else if (!is_null($user) && is_null($type)){
                    $query
                        ->select('s')
                            ->from('SurveyBundle:Survey','s')
                            ->innerJoin('SurveyBundle:SurveyType','s2','WITH','s2.id = s.survey_type')
                            ->innerJoin('SurveyBundle:User','u','WITH','u.id = s.user_id')
                            ->leftJoin('SurveyBundle:Rate','r','WITH','r.id = s.rate')
                            ->leftJoin('SurveyBundle:Rate','rr','WITH','rr.id = s.resend_rate')
                            ->leftJoin('SurveyBundle:SurveyStaffRate','sr','WITH','sr.id = s.staff_rate')
                            ->leftJoin('SurveyBundle:SurveyStaffRate','rsr','WITH','rsr.id = s.resend_staff_rate')
                            ->where('s.send_date >= :start')
                                ->andWhere('s.send_date <= :end')
                                ->andWhere('s.user_id = :user')
                                ->andWhere('s.'.$filter.' is not null')
                            ->addOrderBy('s.send_date','ASC')
                        ->setParameters([
                            "start" => $start,
                            "end" => $end,
                            "user" => $user,
                        ]);
                }else if (is_null($user) && !is_null($type)){
                    $query
                        ->select('s')
                            ->from('SurveyBundle:Survey','s')
                            ->innerJoin('SurveyBundle:SurveyType','s2','WITH','s2.id = s.survey_type')
                            ->innerJoin('SurveyBundle:User','u','WITH','u.id = s.user_id')
                            ->leftJoin('SurveyBundle:Rate','r','WITH','r.id = s.rate')
                            ->leftJoin('SurveyBundle:Rate','rr','WITH','rr.id = s.resend_rate')
                            ->leftJoin('SurveyBundle:SurveyStaffRate','sr','WITH','sr.id = s.staff_rate')
                            ->leftJoin('SurveyBundle:SurveyStaffRate','rsr','WITH','rsr.id = s.resend_staff_rate')
                            ->where('s.send_date >= :start')
                                ->andWhere('s.send_date <= :end')
                                ->andWhere('s.survey_type = :type')
                                ->andWhere('s.'.$filter.' is not null')
                            ->addOrderBy('s.send_date','ASC')
                        ->setParameters([
                            "start" => $start,
                            "end" => $end,
                            "type" => $type,
                        ]);
                }else if (is_null($user) && is_null($type)){
                    $query
                        ->select('s')
                            ->from('SurveyBundle:Survey','s')
                            ->innerJoin('SurveyBundle:SurveyType','s2','WITH','s2.id = s.survey_type')
                            ->innerJoin('SurveyBundle:User','u','WITH','u.id = s.user_id')
                            ->leftJoin('SurveyBundle:Rate','r','WITH','r.id = s.rate')
                            ->leftJoin('SurveyBundle:Rate','rr','WITH','rr.id = s.resend_rate')
                            ->leftJoin('SurveyBundle:SurveyStaffRate','sr','WITH','sr.id = s.staff_rate')
                            ->leftJoin('SurveyBundle:SurveyStaffRate','rsr','WITH','rsr.id = s.resend_staff_rate')
                            ->where('s.send_date >= :start')
                                ->andWhere('s.send_date <= :end')
                                ->andWhere('s.'.$filter.' is not null')
                            ->addOrderBy('s.send_date','ASC')
                        ->setParameters([
                            "start" => $start,
                            "end" => $end,
                        ]);
                }
                break;
        }

        return $query->getQuery();
    }

    public function findAllCancel(\DateTime $start,\DateTime $end){
        $query = $this
            ->getEntityManager()
                ->createQueryBuilder()
                    ->select('s')
                    ->from('SurveyBundle:Survey','s')
                    ->innerJoin('SurveyBundle:SurveyType','s2','WITH','s2.id = s.survey_type')
                    ->innerJoin('SurveyBundle:User','u','WITH','u.id = s.user_id')
                    ->leftJoin('SurveyBundle:Rate','r','WITH','r.id = s.rate')
                    ->leftJoin('SurveyBundle:Rate','rr','WITH','rr.id = s.resend_rate')
                    ->leftJoin('SurveyBundle:SurveyStaffRate','sr','WITH','sr.id = s.staff_rate')
                    ->leftJoin('SurveyBundle:SurveyStaffRate','rsr','WITH','rsr.id = s.resend_staff_rate')
                    ->where('s.send_date >= :start')
                        ->andWhere('s.send_date <= :end')
                        ->andWhere('s.user_comment is not null')
                        ->andWhere('s.admin_comment is null')
                        ->andWhere('s.cancel is null')
                    ->addOrderBy('s.send_date','ASC')
            ->setParameters([
                "start" => $start,
                "end" => $end
            ])
            ->getQuery();

        return $query;

    }

    public function findAllCurrentMonth()
    {
        $start = new \DateTime('first day of this month 00:00:00');
        $start->format('Y-m-d');
        $end = new \DateTime('last day of this month 23:59:59');
        $end->format('Y-m-d');

        $query = $this
            ->getEntityManager()
            ->createQueryBuilder()
                ->select("s")
                ->from('SurveyBundle:Survey','s')
                ->innerJoin('SurveyBundle:SurveyType','s2','WITH','s2.id = s.survey_type')
                ->innerJoin('SurveyBundle:User','u','WITH','u.id = s.user_id')
                ->leftJoin('SurveyBundle:Rate','r','WITH','r.id = s.rate')
                ->leftJoin('SurveyBundle:Rate','rr','WITH','rr.id = s.resend_rate')
                ->leftJoin('SurveyBundle:SurveyStaffRate','sr','WITH','sr.id = s.staff_rate')
                ->leftJoin('SurveyBundle:SurveyStaffRate','rsr','WITH','rsr.id = s.resend_staff_rate')
                ->where('s.send_date >= :start')
                ->andWhere('s.send_date <= :end')
            ->addOrderBy('s.send_date','ASC')
            ->setParameters([
                "start" => $start,
                "end" => $end
            ])
            ->getQuery();



        return $query;
    }
}
